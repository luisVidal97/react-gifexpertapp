{"version":3,"sources":["components/AddCategory.js","helpers/getGifts.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","console","log","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"+KAkCeA,EA/BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAgBrC,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAjBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAGII,MAAOF,GAHX,cAGbG,EAHa,gBAIEA,EAASC,OAJX,uBAIZC,EAJY,EAIZA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCGPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIrC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCLHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAUrBoB,QAAQC,IAAI,oBAAoBrB,GAVG,MCFX,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAmBtC,OAbAC,qBAAW,WACP1B,EAAQC,GACH0B,MAAM,SAAAC,GAEHC,YAAY,WACRJ,EAAS,CACLjB,KAAMoB,EACNL,SAAS,MAEf,UAEX,CAACtB,IAEGuB,EDNyBM,CAAa7B,GAAjCa,EAXuB,EAW5BN,KAAae,EAXe,EAWfA,QAEpB,OACI,qCACA,oBAAIN,UAAU,oCAAd,SAAmDhB,IACjDsB,GAAW,mBAAGN,UAAU,mCAAb,qBACb,qBAAKA,UAAU,YAAf,SAEYH,EAAOJ,KAAK,SAAEC,GAAF,OACR,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEU/BmB,EA/BM,WAAM,MAGa5C,mBAAS,CAAC,cAHvB,mBAGhB6C,EAHgB,KAGJ9C,EAHI,KAavB,OAFAmC,QAAQC,IAAI,UAGR,qCACI,8CACA,cAAC,EAAD,CAAapC,cAAeA,IAC5B,uBACA,6BAEQ8C,EAAWtB,KAAK,SAACT,GAAD,OAChB,cAAC,EAAD,CAEIA,SAAUA,GADLA,YCnB7BgC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.7d5b29c2.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    \r\n    const handleImputChange = (e) =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if( inputValue.trim().length > 2 ) {\r\n            setCategories( cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (   \r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={ handleImputChange }\r\n            />\r\n        </form>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n \r\nexport default AddCategory;\r\n","export const getGifs = async (category) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=bXWKR0RQc2yTKo4yjjYZcBjwpijht9lv`;\r\n\r\n    const response = await fetch( url );\r\n    const {data} = await response.json();\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n\r\n        }\r\n    });\r\n    return gifs;\r\n}","import React from 'react';\r\n\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n// import { getGifs } from '../helpers/getGifts';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n    // Only execute this when the component rendered itself by first time\r\n    \r\n//     const [images, setImages] = useState([]);\r\n//     useEffect( ()=> {\r\n//         getGifs(category)\r\n//             .then( setImages );\r\n// //            .then(imgs => setImages(imgs));\r\n//     }, [category])\r\n\r\n    console.log(\"corre de nuevo1: \",category )\r\n    const {data:images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n        { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n        <div className=\"card-grid\">\r\n                {\r\n                    images.map( ( img ) => (\r\n                        <GifGridItem key={img.id} {...img} />\r\n                        ))\r\n                    }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifts\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( ()=> {\r\n        getGifs(category)\r\n            .then( imgs => {\r\n\r\n                setTimeout( ()=>{\r\n                    setstate({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n                },10000);\r\n            } );\r\n    }, [category])\r\n\r\n    return state;\r\n}","import React, { useState }  from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    // const categories = ['One Punch','Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['Landscape']);\r\n\r\n    // const handleAdd = (e) =>{\r\n    //     setCategories([...categories, 'one more']);\r\n    //     // setCategories puede tener un callback donde el primer argumento\r\n    //     // es el valor del estado anterior y el segundoo es nuevo estado\r\n    //     // setCategories( cats => [...cats, 'HunterXHunter']);\r\n    // }\r\n    console.log(\"object\")\r\n    \r\n    return ( \r\n        <> \r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    categories.map( (category) => \r\n                    <GifGrid \r\n                        key={category}\r\n                        category={category}/>\r\n                    )\r\n                }\r\n            </ol>\r\n        </> \r\n    );\r\n}\r\n \r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport GifExpertApp from './GifExpertApp'\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}